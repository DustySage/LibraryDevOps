@page "/books/add"
@using LibraryManagement.Data;
@using LibraryManagement.Data.Models;
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject HttpClient httpClient
@using Newtonsoft.Json.Linq
@attribute [Authorize (Roles = "Librarian")]

<PageTitle>Add Book</PageTitle>


<h1>AddBook</h1>

<input type="text" class="form-control" placeholder="Search for a book" @oninput="SearchBooks" />
<ul class="list-group mt-2" style="max-height: 500px; overflow-y: scroll">
    @foreach (var book in Books)
    {
        <li class="list-group-item" data-id="@book.Id" @onclick="() => SelectBook(book.Id)">
            <div class="d-flex">
                @if (book.ImageLinks != null && book.ImageLinks.Count > 0)
                {
                    <img src="@book.ImageLinks.First().Value" alt="@book.Title" style="max-height: 150px; margin-right: 10px" />
                }
                <div>
                    <h5>@book.Title</h5>
                    <p>by @book.Author</p>
                </div>
            </div>
        </li>
    }
</ul>

<BookForm Book="@Book"
          IsBusy="@IsBusy"
          OnSubmit="@HandleSubmit"></BookForm>




@if (SuccessMessage is not null)
{
    <br />
    <div class="alert alert-success" role="alert">
        @SuccessMessage
    </div>
}
else if (ErrorMessage is not null)
{
    <br />
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

@code {
    public Book? Book { get; set; }
    private bool IsBusy { get; set; }
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }
    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Book = new();
    }

    private async Task HandleSubmit(bool isValid)
    {
        if (isValid)
        {
            await HandleValidSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            if (Book is not null)
            {
                using var context = ContextFactory.CreateDbContext();
                context.Books.Add(Book);
                await context.SaveChangesAsync();

                SuccessMessage = $"The Book Entitled: {Book.Title}, by: {Book.Author} was added successfully to the Library's Database";
                ErrorMessage = null;
                //New Book for next iteration
                Book = new();

                int lastId = await context.Books.MaxAsync(b => b.Id);
                await Task.Delay(TimeSpan.FromSeconds(1));
                NavigationManager.NavigateTo($"/books/view/{lastId}");
            }
        }
        catch (Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error whilst adding Book: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }

    private string SearchTerm { get; set; } = "";
    private List<BookSearchResult> Books { get; set; } = new List<BookSearchResult>();

    private async Task SearchBooks(ChangeEventArgs e)
    {
        SearchTerm = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            Books.Clear();
            return;
        }

        var response = await httpClient.GetAsync($"https://www.googleapis.com/books/v1/volumes?q={Uri.EscapeDataString(SearchTerm)}&langRestrict=en&printType=books");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var data = JObject.Parse(json);
            var items = data["items"] as JArray;
            if (items != null)
            {
                Books = items.Select(item => new BookSearchResult
                    {
                        Id = item["id"].Value<string>(),
                        Title = item["volumeInfo"]["title"].Value<string>(),
                        Author = item["volumeInfo"]["authors"]?.FirstOrDefault()?.Value<string>() ?? "Unknown",
                        Description = item["volumeInfo"]["description"]?.Value<string>(),
                        ImageLinks = item["volumeInfo"]["imageLinks"]?.ToObject<Dictionary<string, string>>(),
                        Isbn = item["volumeInfo"]["industryIdentifiers"]?.FirstOrDefault(x => x["type"].Value<string>() == "ISBN_13")?["identifier"]?.Value<string>()
                    }).ToList();
            }
            else
            {
                Books.Clear();
            }
        }
        else
        {
            Books.Clear();
        }
    }

    public class BookSearchResult
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public string Description { get; set; }
        public string Isbn { get; set; }
        public Dictionary<string, string> ImageLinks { get; set; }
    }

    private void SelectBook(string bookId)
    {
        var selectedBook = Books.FirstOrDefault(book => book.Id == bookId);
        if (selectedBook != null)
        {
            Book = new Book
                {
                    Title = selectedBook.Title,
                    Author = selectedBook.Author,
                    Description = selectedBook.Description,
                    Isbn = selectedBook.Isbn,
                    ImageUrl = selectedBook.ImageLinks?.LastOrDefault().Value,
                    TotalCopies = 1,
                    AvailableCopies = 1
                };
        }
    }
}
